{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs20 \cf0 CSCI E-55											             Gerald Trotman\
HW#7												             12/02/15\
\
\
Part I: WordHistogram.java\
\
For the first part this was a simple adaptation of our WordCount example where instead of outputting the word itself followed by the corresponding occurrence of that word, we wanted to produce the length of the word and its corresponding occurrence. \
\
I managed to run that locally as well as against the HDFS for extra credit. I created separate folders for their output called \'93part1\'94 that contains the successful output stamps as well as the desired output.\
\
\
Part II: WordCountByFile.java\
\
For part two, we are again asked to modify our WordCount example. This time, we want to produce the word followed by the directory of where the word is located and finally the amount of occurrences. It took a while for me to think about exactly how to get all the output on one line but I realized concatenating the loop logic would do the trick. \
\
I managed to run the local output. I created a separate folder for the output called \'93part 2\'94 that contains the successful output stamps as well as the desired output.\
\
\
Part III: DocWordIndex.java \
\
For part three we were asked to build specifically off of WordCountByFile. The difference here is that we were asked to produce the word, the directory of where the word is located and instead of it\'92s occurrence, we wanted the index of where the word appears within the string.\
\
I managed to run the local output. I created a separate folder for the output called \'93part 3\'94 that contains the successful output stamps as well as the desired output. However, the same logic I tried to apply to Part II in keeping the content on one line per occurrence of a word\'92s index was pretty non trivial and was unfortunately/fortunately the only logic I left out of the spec. Instead, it lists the other occurrences of the index of the word on the following line.}